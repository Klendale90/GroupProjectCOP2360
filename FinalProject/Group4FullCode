// Contractor.cs
// This class represents a general contractor with basic identifying information.

using System;
using System.Collections.Generic;

public class Contractor
{
    // Property to store the contractor's name
    public string Name { get; set; }

    // Property to store the contractor's unique number
    public int Number { get; set; }

    // Property to store the contractor's start date
    public DateTime StartDate { get; set; }

    // Default constructor
    public Contractor() { }

    // Parameterized constructor to initialize all fields
    public Contractor(string name, int number, DateTime startDate)
    {
        Name = name;
        Number = number;
        StartDate = startDate;
    }
}

// Subcontractor.cs
// This class represents a subcontractor and extends Contractor by adding shift and pay rate.

// Subcontractor class derived from Contractor
class Subcontractor : Contractor
{
    // This are the variables to store subcontractor's shift and hourly pay rate
    private int shift;             // 1 = Day shift, 2 = Night shift
    private double hourlyPayRate;  // Hourly pay rate for the subcontractor

    // The Constructor for Subcontractor
    // This will take the name, number, start date (from Contractor), plus shift and hourly pay rate
    public Subcontractor(string name, int number, DateTime startDate, int shift, double hourlyPayRate)
        : base(name, number, startDate)  // Calls the constructor of the base (Contractor) class
    {
        this.shift = shift;                  // Sets the shift (1 or 2)
        this.hourlyPayRate = hourlyPayRate;  // Sets the hourly pay rate
    }

    // Getter method for shift
    public int GetShift() { return shift; }

    // Getter method for hourly pay rate
    public double GetHourlyPayRate() { return hourlyPayRate; }

    // Setter method to change the shift
    public void SetShift(int shift) { this.shift = shift; }

    // Setter method to change the hourly pay rate
    public void SetHourlyPayRate(double rate) { this.hourlyPayRate = rate; }

    // This will compute the total pay based on hours worked
    // Returns a float representing total pay
    public float ComputePay(double hoursWorked)
    {
        // Calculate base pay: hourly rate * number of hours worked
        double basePay = hourlyPayRate * hoursWorked;

        // If subcontractor works the night shift (shift == 2), add a 3% bonus to the base pay
        if (shift == 2)
        {
            basePay *= 1.03;  // Apply the 3% shift differential
        }

        // Return the total pay as a float
        return (float)basePay;
    }
}

// Program.cs
// This class demonstrates the use of Contractor and Subcontractor classes.

class Program
{
    static void Main()
    {
        // List to store multiple subcontractor objects
        List<Subcontractor> subcontractors = new List<Subcontractor>();
        string input;

        do
        {
            // Prompt user for subcontractor's name
            Console.WriteLine("Enter subcontractor name:");
            string name = Console.ReadLine();

            // Prompt user for contractor number
            Console.WriteLine("Enter contractor number:");
            int number = int.Parse(Console.ReadLine());

            // Prompt user for start date and parse to DateTime
            Console.WriteLine("Enter start date (yyyy-MM-dd):");
            DateTime startDate = DateTime.Parse(Console.ReadLine());

            // Prompt user for shift (1 = day, 2 = night)
            Console.WriteLine("Enter shift (1 = day, 2 = night):");
            int shift = int.Parse(Console.ReadLine());

            // Prompt user for hourly pay rate
            Console.WriteLine("Enter hourly pay rate:");
            double hourlyPayRate = double.Parse(Console.ReadLine());

            // Create a new Subcontractor object with the provided information
            var subcontractor = new Subcontractor(name, number, startDate, shift, hourlyPayRate);

            // Prompt user for hours worked to compute pay
            Console.WriteLine("Enter hours worked:");
            float hoursWorked = float.Parse(Console.ReadLine());

            // Calculate and display computed pay
            float pay = subcontractor.ComputePay(hoursWorked);
            Console.WriteLine($"Computed pay: {pay:C}");

            // Add the new subcontractor to the list
            subcontractors.Add(subcontractor);

            // Ask user if they want to add another subcontractor
            Console.WriteLine("Add another subcontractor? (y/n):");
            input = Console.ReadLine().ToLower();

        } while (input == "y");

        // Display all subcontractors entered
        Console.WriteLine("\nAll subcontractors entered:");
        foreach (var sc in subcontractors)
        {
            Console.WriteLine($"{sc.Name}, #{sc.Number}, Start: {sc.StartDate.ToShortDateString()}, Shift: {sc.Shift}, Rate: {sc.HourlyPayRate:C}");
        }
    }
}

